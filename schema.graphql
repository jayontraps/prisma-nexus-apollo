### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String!
  user: User!
}

scalar DateTime

type Human {
  age: Int
  id: Int!
  name: String!
  wookies(cursor: WookieWhereUniqueInput, skip: Int, take: Int): [Wookie!]!
}

type Mutation {
  createDraft(authorEmail: String!, content: String, title: String!): Post!
  createHuman(age: Int, name: String!): Human!
  createWookie(color: String!, name: String!, origin: String!, ownerName: String!): Wookie!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  login(email: String!, password: String!): AuthPayload!
  publish(id: Int): Post
  signup(email: String!, name: String, password: String!): AuthPayload!
  signupUser(data: UserCreateInput!): User!
}

type Post {
  author: User
  authorId: Int
  content: String
  id: Int!
  published: Boolean!
  title: String!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  allHumans: [Human!]!
  allTestTypes: [TestType!]!
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  findHuman(searchString: String): [Human!]!
  me: User!
  post(where: PostWhereUniqueInput!): Post
}

type TestType {
  id: Int!
  title: String!
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String
  posts(cursor: PostWhereUniqueInput, skip: Int, take: Int): [Post!]!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  posts: PostCreateManyWithoutAuthorInput
  updatedAt: DateTime
}

type Wookie {
  color: String!
  id: Int!
  name: String!
  origin: String!
  owner: Human
  ownerId: Int
}

input WookieWhereUniqueInput {
  id: Int
}
